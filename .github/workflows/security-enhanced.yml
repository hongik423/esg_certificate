name: 🔒 Enhanced Security Check

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # 매주 월요일 오전 9시에 정기 보안 검사
    - cron: '0 9 * * 1'

permissions:
  contents: read
  security-events: write

jobs:
  # 민감한 정보 탐지
  secret-detection:
    name: 🔍 Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: API 키 하드코딩 검사
        run: |
          echo "🔍 API 키 하드코딩 검사 시작..."
          
          # OpenAI API 키 검사
          if grep -r "sk-proj-" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" src/; then
            echo "❌ OpenAI API 키가 하드코딩되어 있습니다!"
            exit 1
          fi
          
          # Google Apps Script ID 검사 (실제 ID 패턴)
          if grep -r "AKfycby[a-zA-Z0-9_-]\{50,\}" --include="*.ts" --include="*.tsx" src/; then
            echo "❌ Google Apps Script ID가 하드코딩되어 있습니다!"
            exit 1
          fi
          
          # 비밀번호 하드코딩 검사
          if grep -r "password\s*=\s*['\"][^'\"]*['\"]" --include="*.ts" --include="*.tsx" src/; then
            echo "❌ 비밀번호가 하드코딩되어 있습니다!"
            exit 1
          fi
          
          # 기타 민감한 정보 검사
          if grep -r "secret\s*=\s*['\"][^'\"]*['\"]" --include="*.ts" --include="*.tsx" src/; then
            echo "❌ Secret이 하드코딩되어 있습니다!"
            exit 1
          fi
          
          echo "✅ API 키 하드코딩 검사 통과"

      - name: 환경변수 파일 Git 포함 검사
        run: |
          echo "🔍 환경변수 파일 Git 포함 검사..."
          
          if find . -name ".env*" -not -name ".env.example*" -not -path "./node_modules/*" | grep -v ".env.example"; then
            echo "❌ 환경변수 파일이 Git에 포함되어 있습니다!"
            echo "발견된 파일들:"
            find . -name ".env*" -not -name ".env.example*" -not -path "./node_modules/*"
            exit 1
          fi
          
          echo "✅ 환경변수 파일 Git 포함 검사 통과"

      - name: 민감한 파일 확장자 검사
        run: |
          echo "🔍 민감한 파일 확장자 검사..."
          
          # 개인키, 인증서 파일 검사
          if find . -name "*.pem" -o -name "*.key" -o -name "*.p12" -o -name "*.pfx" -not -path "./node_modules/*"; then
            echo "❌ 민감한 인증서/키 파일이 포함되어 있습니다!"
            exit 1
          fi
          
          # 백업 파일 검사
          if find . -name "*.backup" -o -name "*.bak" -not -path "./node_modules/*"; then
            echo "❌ 백업 파일이 포함되어 있습니다!"
            exit 1
          fi
          
          echo "✅ 민감한 파일 확장자 검사 통과"

  # 의존성 보안 검사
  dependency-security:
    name: 🔧 Dependency Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: npm audit 보안 검사
        run: |
          echo "🔍 npm audit 보안 검사 시작..."
          npm audit --audit-level high
          echo "✅ npm audit 보안 검사 완료"

      - name: 의존성 취약점 상세 검사
        run: |
          echo "🔍 의존성 취약점 상세 검사..."
          npx audit-ci --config .audit-ci.json || echo "⚠️ 취약점 발견 - 수동 검토 필요"

  # 코드 보안 분석
  code-security:
    name: 🔍 Code Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript 타입 검사
        run: |
          echo "🔍 TypeScript 타입 검사..."
          npx tsc --noEmit
          echo "✅ TypeScript 타입 검사 완료"

      - name: ESLint 보안 규칙 검사
        run: |
          echo "🔍 ESLint 보안 규칙 검사..."
          npm run lint
          echo "✅ ESLint 보안 규칙 검사 완료"

      - name: 보안 관련 패턴 검사
        run: |
          echo "🔍 보안 관련 패턴 검사..."
          
          # eval() 사용 검사
          if grep -r "eval(" --include="*.ts" --include="*.tsx" src/; then
            echo "⚠️ eval() 사용이 발견되었습니다. 보안 검토가 필요합니다."
          fi
          
          # innerHTML 사용 검사
          if grep -r "innerHTML" --include="*.ts" --include="*.tsx" src/; then
            echo "⚠️ innerHTML 사용이 발견되었습니다. XSS 취약점 검토가 필요합니다."
          fi
          
          # console.log에 민감 정보 출력 검사
          if grep -r "console\.log.*\(.*password\|.*token\|.*key\|.*secret\)" --include="*.ts" --include="*.tsx" src/; then
            echo "⚠️ console.log에 민감한 정보가 출력되고 있을 수 있습니다."
          fi
          
          echo "✅ 보안 관련 패턴 검사 완료"

  # 환경변수 설정 검증
  env-validation:
    name: 🔧 Environment Variables Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: 환경변수 검증 테스트
        env:
          NEXT_PUBLIC_GOOGLE_SCRIPT_URL: ${{ secrets.GOOGLE_SCRIPT_URL }}
          NEXT_PUBLIC_GOOGLE_SHEETS_ID: ${{ secrets.GOOGLE_SHEETS_ID }}
          NEXT_PUBLIC_EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
          NEXT_PUBLIC_EMAILJS_PUBLIC_KEY: ${{ secrets.EMAILJS_PUBLIC_KEY }}
          OPENAI_API_KEY: sk-test-mock-key-for-build-only
        run: |
          echo "🔍 환경변수 검증 테스트..."
          npm run build
          echo "✅ 환경변수 검증 테스트 완료"

  # 보안 요약 리포트
  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [secret-detection, dependency-security, code-security, env-validation]
    if: always()
    steps:
      - name: 보안 검사 결과 요약
        run: |
          echo "🔒 보안 검사 결과 요약"
          echo "=========================="
          echo "Secret Detection: ${{ needs.secret-detection.result }}"
          echo "Dependency Security: ${{ needs.dependency-security.result }}"
          echo "Code Security: ${{ needs.code-security.result }}"
          echo "Environment Validation: ${{ needs.env-validation.result }}"
          echo "=========================="
          
          if [[ "${{ needs.secret-detection.result }}" == "failure" || 
                "${{ needs.dependency-security.result }}" == "failure" || 
                "${{ needs.code-security.result }}" == "failure" || 
                "${{ needs.env-validation.result }}" == "failure" ]]; then
            echo "❌ 보안 검사에서 중요한 문제가 발견되었습니다."
            echo "📋 수정이 필요한 항목들을 확인하고 조치해 주세요."
            exit 1
          else
            echo "✅ 모든 보안 검사를 통과했습니다!"
            echo "🎉 GitHub 게시 준비가 완료되었습니다."
          fi 