name: Deploy to GitHub Pages

on:
  # GitHub Pages 배포 트리거
  push:
    branches:
      - main
      - master
  
  # 수동 실행 가능
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deploy Environment'
        required: true
        default: 'github-pages'
        type: choice
        options:
        - github-pages
        - staging

permissions:
  contents: read
  pages: write
  id-token: write

# 동시 배포 방지
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 빌드 작업
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔄 코드 체크아웃
        uses: actions/checkout@v4
        
      - name: 🔧 Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📦 종속성 설치
        run: npm ci
          
      - name: 🏗️ Next.js 정적 빌드 (GitHub Pages용)
        run: npm run build:github
        env:
          # GitHub Pages 환경변수
          GITHUB_PAGES: true
          NODE_ENV: production
          NEXT_PUBLIC_BASE_PATH: /m_center_landingpage
          NEXT_PUBLIC_SITE_URL: https://hongik423.github.io/m_center_landingpage
          NEXT_PUBLIC_IS_GITHUB_PAGES: true
          
          # Google Apps Script 연동 (EmailJS 제거됨)
          NEXT_PUBLIC_GOOGLE_SCRIPT_URL: ${{ secrets.NEXT_PUBLIC_GOOGLE_SCRIPT_URL }}
          NEXT_PUBLIC_GOOGLE_SHEETS_ID: ${{ secrets.NEXT_PUBLIC_GOOGLE_SHEETS_ID }}
          NEXT_PUBLIC_BASE_URL: https://hongik423.github.io/m_center_landingpage
          
          # AI API 키 (필요시)
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          
      - name: 📄 GitHub Pages 최적화
        run: |
          # .nojekyll 파일 생성 (GitHub Pages Jekyll 비활성화)
          touch ./out/.nojekyll
          echo "✅ .nojekyll 파일 생성"
          
          # CNAME 파일 제거 (커스텀 도메인 미사용)
          if [ -f "./out/CNAME" ]; then
            rm ./out/CNAME
            echo "🗑️ CNAME 파일 제거"
          fi
          
          # 🔧 _next 폴더 보호 (GitHub Pages Jekyll 무시 방지)
          if [ -d "./out/_next" ]; then
            find ./out/_next -name ".*" -type f -delete
            echo "✅ _next 폴더 숨김파일 제거"
          fi
          
          # 🔧 HTML 파일에서 절대 경로 확인
          if [ -f "./out/index.html" ]; then
            if grep -q "/_next/static" "./out/index.html"; then
              echo "✅ 절대 경로 확인됨"
            else
              echo "⚠️ 상대 경로 발견 - 수동 확인 필요"
            fi
          fi
          
          # 404.html 확인/생성
          if [ ! -f "./out/404.html" ] && [ -f "./public/404.html" ]; then
            cp ./public/404.html ./out/404.html
            echo "✅ 404.html 복사 완료"
          fi
          
          # robots.txt, sitemap.xml 복사
          for file in robots.txt sitemap.xml; do
            if [ -f "./public/$file" ] && [ ! -f "./out/$file" ]; then
              cp "./public/$file" "./out/$file"
              echo "✅ $file 복사 완료"
            fi
          done
          
          # 🔧 정적 파일 권한 설정 (GitHub Pages 호환)
          find ./out -type f -name "*.js" -exec chmod 644 {} \;
          find ./out -type f -name "*.css" -exec chmod 644 {} \;
          echo "✅ 정적 파일 권한 설정 완료"
          
          # 빌드 결과 확인
          echo "🔍 빌드 결과:"
          echo "- 총 파일 수: $(find ./out -type f | wc -l)"
          echo "- 정적 자산: $(find ./out/_next/static -type f 2>/dev/null | wc -l || echo 0)"
          echo "- HTML 파일: $(find ./out -name "*.html" | wc -l)"
          echo "- JS 파일: $(find ./out -name "*.js" | wc -l)"
          echo "- CSS 파일: $(find ./out -name "*.css" | wc -l)"
          
          # 중요 파일 존재 확인
          echo "🔍 핵심 파일 확인:"
          [ -f "./out/index.html" ] && echo "✅ index.html" || echo "❌ index.html 누락"
          [ -f "./out/.nojekyll" ] && echo "✅ .nojekyll" || echo "❌ .nojekyll 누락"
          [ -d "./out/_next" ] && echo "✅ _next 디렉토리" || echo "❌ _next 디렉토리 누락"
          [ -d "./out/_next/static" ] && echo "✅ _next/static 디렉토리" || echo "❌ _next/static 디렉토리 누락"
          
          # 🔧 _next/static 하위 구조 확인
          if [ -d "./out/_next/static" ]; then
            echo "📁 _next/static 구조:"
            ls -la ./out/_next/static/ | head -10
          fi
          
      - name: 📤 GitHub Pages 아티팩트 업로드
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # 배포 작업
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 🚀 GitHub Pages 배포
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: ✅ 배포 완료 알림
        run: |
          echo "🎉 GitHub Pages 배포 성공!"
          echo "📍 배포 URL: ${{ steps.deployment.outputs.page_url }}"
          echo "🔗 직접 링크: https://hongik423.github.io/m_center_landingpage/"
          echo "⏰ 배포 시간: $(date)"
          echo ""
          echo "🔍 주요 페이지:"
          echo "- 메인 페이지: https://hongik423.github.io/m_center_landingpage/"
          echo "- AI 진단: https://hongik423.github.io/m_center_landingpage/diagnosis/"
          echo "- 상담 신청: https://hongik423.github.io/m_center_landingpage/consultation/"
          echo "- 시스템 테스트: https://hongik423.github.io/m_center_landingpage/test-email/"
          echo ""
          echo "✨ Google Apps Script 기반 통합 시스템 배포 완료!"

  # GitHub AI 호환성 테스트
  ai-compatibility-test:
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
      - name: 🤖 GitHub AI 호환성 테스트
        run: |
          echo "🔍 GitHub AI 환경 점검 시작..."
          
          # 기본 환경 정보
          echo "📊 환경 정보:"
          echo "- Runner OS: $RUNNER_OS"
          echo "- GitHub Workspace: $GITHUB_WORKSPACE"
          echo "- GitHub Repository: $GITHUB_REPOSITORY"
          echo "- GitHub Actor: $GITHUB_ACTOR"
          
          # Node.js 환경 확인
          echo "🔧 Node.js 환경:"
          node --version
          npm --version
          
          # 배포 URL 상태 확인
          echo "🌐 배포 상태 확인:"
          DEPLOY_URL="${{ steps.deployment.outputs.page_url || 'https://hongik423.github.io/m_center_landingpage/' }}"
          
          # 최대 5분 대기 후 상태 확인
          for i in {1..10}; do
            echo "⏳ 배포 안정화 대기 중... ($i/10)"
            sleep 30
            
            if curl -s -o /dev/null -w "%{http_code}" "$DEPLOY_URL" | grep -q "200"; then
              echo "✅ 사이트 접근 성공!"
              break
            elif [ $i -eq 10 ]; then
              echo "⚠️ 사이트 접근 실패 - GitHub AI 환경에서 수동 확인 필요"
            fi
          done
          
          echo "🎯 GitHub AI 가동 준비 완료!"
          echo "💡 GitHub Codespaces나 GitHub.dev에서 프로젝트를 열어 AI 기능을 활용하세요."
          
      - name: 📋 GitHub AI 활용 가이드
        run: |
          echo "🚀 GitHub AI 완전 가동 가이드:"
          echo ""
          echo "1️⃣ GitHub Codespaces 시작:"
          echo "   - 리포지토리에서 'Code' > 'Codespaces' > 'Create codespace on main'"
          echo ""
          echo "2️⃣ GitHub.dev 에디터:"
          echo "   - 리포지토리에서 '.' 키 눌러서 바로 접속"
          echo "   - 또는 URL에서 github.com을 github.dev로 변경"
          echo ""
          echo "3️⃣ AI 기능 활용:"
          echo "   - GitHub Copilot: 코드 자동완성 및 제안"
          echo "   - GitHub Copilot Chat: AI와 대화하며 코딩"
          echo "   - Code Scanning: 보안 취약점 자동 탐지"
          echo "   - Dependabot: 의존성 자동 업데이트"
          echo ""
          echo "4️⃣ 개발 서버 실행:"
          echo "   - npm install && npm run dev"
          echo "   - 포트 3000에서 개발 서버 실행"
          echo ""
          echo "✨ 이제 GitHub AI가 완전히 가동됩니다!" 